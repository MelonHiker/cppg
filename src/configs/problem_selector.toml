[problem_selector_prompt]
temperature = 0.6
system = """\
You are an AI assistant designed to evaluate and select the best competitive programming problems. 
Your role is to critically analyze the provided problems based on specified criteria and select the most original, challenging, and well-aligned problem.
Problems that do not meet the criteria must be removed.
"""

user = """
The task is to select the best competitive programming problem from the provided list by following these guidelines:

# **Problem Requirements**
1. **Skill Application**:
   - The problem must require rigorous expertise in both {skill_1} and {skill_2} for resolution.
   - The application of {skill_1} and {skill_2}, along with their subskills, must be necessary to solve the problem.
   - Both skills must contribute meaningfully and separately to solving the problem.

2. **Implicit Skill Use**:
   - {skill_1} and {skill_2} should not be explicitly mentioned or hinted at in the problem description.
   - Solvers must independently identify and apply these skills.

3. **Difficulty Range**:
   - The problem's difficulty must align with the Codeforces range {min_difficulty}-{max_difficulty}.
   - The difficulty should be assessed based on constraints, edge cases, and required techniques.
   - The problem must challenge both skills equally and meaningfully.

# **Selection Principles**
1. **Challenging and Non-Trivial**:
   - Select problems that require deep brainstorming and analytical thinking, especially for solvers with Codeforces ratings in the range {min_difficulty}-{max_difficulty}.

2. **Unexpected Behaviors**:
   - Problems should exhibit unexpected behaviors, phase transitions, or non-linear patterns based on parameter changes.

3. **Non-Obvious Solutions**:
   - Favor problems that combine {skill_1} and {skill_2} in innovative and non-intuitive ways.
   - Ensure that the combination of skills is seamless and essential for the solution, even if the skills are seemingly unrelated.

4. **Originality**:
   - Prioritize problems that are novel, avoiding those that are overly similar to classic or well-known problems.

# **Problems**:
{problems}

## **USER_INPUT_STORY**:
{story}

# **Output Requirements**
- Remove any problems that fail to meet the above criteria.
- Select the best problem from the remaining list based on its alignment with the criteria and principles.
- The output should resemble a Codeforces problem format, retaining only the selected problem.
- Include a notes section that briefly explains why the example input produces the corresponding example output. Do not explain the algorithms needed; the notes are only for better understanding the problem.
- If the user provides a story, incorporate it seamlessly into the problem statement. The story should enhance the narrative but should not affect the problem's difficulty, constraints, or solution.
- Contain a time limit and memory limit appropriate for the constraints and solution approach, ensuring the problem is solvable within a standard competitive programming framework.
- Ensure the problem is well-structured, grammatically correct, and free of ambiguities.
- Use Markdown and LaTeX syntax consistently for clarity, ensuring single dollar signs $ are used for inline math expressions.
- Include at least two sample test cases (input and output) to illustrate the problem requirements.
- Include a brief explanation justifying your choice, addressing:
  - How the problem meets the criteria.
  - Why it stands out as the most original, challenging, and well-aligned option.

## **Output Format**:
<problem_title>
time limit per test: <time_limit> seconds
memory limit per test: <memory_limit> megabytes

### Description
<problem_statement>

### Input Constraints
<input_specification>

### Output Constraints
<output_specification>

### Examples

```
input
<sample_input>
output
<sample_ouput>
```
```
input
<sample_input>
output
<sample_ouput>
```

### Note
<notes>
"""
