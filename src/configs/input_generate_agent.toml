[input_generate_agent]
temperature = 0.3
model = "models/gemini-2.0-flash-thinking-exp"

prompt_tmpl = '''\
## Competitive Programming Test Case Generator

### **Task Description:**
You are an AI assistant specialized in writing Python scripts to generate test cases for competitive programming problems.

Your task is to generate a **Python function** that creates valid input test cases while strictly following the given **input structure analysis report**.

### **Input Analysis Report:**
{report}

---

### **Sample Input:**
{sample_input}

---

## **Guidelines for the Generator Function:**  
1. **Variable Constraints Handling:**  
   - For each variable $x$, define `min_x` and `max_x` as function parameters.  
   - Ensure that generated values strictly adhere to the provided input constraints.  
   
2. **Variable Relationships & Dependencies:**  
   - Detect relationships between variables (e.g., in a connected graph $G(N, M)$, $M$ must be at least $N-1$).  
   - Adjust parameters accordingly, e.g., `min_M = max(min_M, N - 1)`.  

3. **Validation of Constraints:**  
   - If any arguments violate constraints, raise a `ValueError`.  
   - Ensure input values remain valid while generating random test cases.  

4. **Efficiency & Randomization:**  
   - Use Python's `random` module for generating randomized yet **valid** test cases.  
   - Optimize the function for large constraints (e.g., $N \\leq 10^6$).

---

## **Output Format**
Your output should be a **single Python code block** containing the generator function.  
- **The function must be named `gen(...)`** and should accept **dynamic constraints** as parameters.  
- **Provide clear and structured comments** explaining each step inside the function.  
- **Your code should not print additional words or lines, except for the testcase values**
- **Your code should only generate A SINGLE TESTCASE, for example, calling gen() for only once.**
---

## **Example Generator Functions**
```
# generate tree (1-based)
def gen(min_n, max_n):
    if (not isinstance(min_n, int) or not isinstance(min_n, int) or min_n < 1):
        raise ValueError("n must be a positive integer")
    
    if (min_n > max_n):
        raise ValueError("min_n should less than or equal to max_n")
    
    n = random.randint(min_n, max_n)
    print(n)
    
    nodes = [i for i in range(1, n + 1)]
    random.shuffle(nodes)
    for v in range(2, n + 1):
        u = random.randint(1, v - 1)
        v = nodes[v - 1]
        u = nodes[u - 1]
        if (random.randint(0, 1)):
            u, v = v, u
        print(u, v)
```
```
# generate simple positive weighted graph (1-based)
def gen(min_n, max_n, min_m, max_m, min_weight, max_weight):
    if (not all(isinstance(x, int) and x > 0 for x in [min_n, max_n, min_m, max_m, min_weight, max_weight])):
        raise ValueError("n, m and weight must be positive intergers")
    
    if (min_n > max_n or min_m > max_m or min_weight > max_weight):
        raise ValueError("min should less than or equal to max")

    n = random.randint(min_n, max_n)
    max_m = min(max_m, n * (n - 1) // 2)
    m = random.randint(min_m, max_m)
    print(n, m)

    # Generate all possible edges
    all_possible_edges = []
    for u in range(1, n + 1):
        for v in range(u + 1, n + 1):
            all_possible_edges.append((u, v))

    # choose m edges
    edges = random.sample(all_possible_edges, m)
    random.shuffle(edges)

    # output edges
    nodes = [i for i in range(1, n + 1)]
    random.shuffle(nodes)
    for edge in edges:
        u, v = edge
        u = nodes[u - 1]
        v = nodes[v - 1]
        if (random.randint(0, 1)):
            u, v = v, u
        print(u, v, random.randint(min_weight, max_weight))
```
```
# Generate a random palindrome string with only letters where length is n
def gen(min_n, max_n):
    if (not isinstance(min_n, int) or not isinstance(min_n, int) or min_n < 1):
        raise ValueError("n must be a positive integer")
    
    if (min_n > max_n):
        raise ValueError("min_n should less than or equal to max_n")
    
    n = random.randint(min_n, max_n)
    print(n)

    alphabet = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
    result = [random.choice(alphabet) for _ in range((n + 1) // 2)]
    result.extend(result[0:n // 2][::-1])
    print(*result, sep="")
```
```
# generate float matrix
def gen(min_n, max_n, min_m, max_m, min_value, max_value):
    if (not all(isinstance(x, int) and x > 0 for x in [min_n, max_n, min_m, max_m, min_value, min_value])):
        raise ValueError("n and m must be positive integers")
    
    if (min_n > max_n or min_m > max_m or min_value > max_value):
        raise ValueError("min should less than or equal to max")
    
    n = random.randint(min_n, max_n)
    m = random.randint(min_n, max_n) 
    print(n, m)
    
    for i in range(n):
        line = [random.uniform(min_value, max_value) for j in range(m)]
        print(*line)
```
```
# generate a random sequence of distinct element
def gen(min_n, max_n, min_value, max_value):
    if (not all(isinstance(x, int) and x > 0 for x in [min_n, max_n, min_value, min_value])):
        raise ValueError("n and value must be positive integers")
    
    if (min_n > max_n or min_value > max_value):
        raise ValueError("min should less than or equal to max")
    
    n = random.randint(min_value, max_value)
    print(n)
    
    seq = random.sample(range(min_value, max_value + 1), n)
    print(*seq)
```
```
# generate connected simple graph (1-based)
def gen(min_n, max_n, min_m, max_m):
    if (not all(isinstance(x, int) and x > 0 for x in [min_n, max_n, min_m, max_m])):
        raise ValueError("n and m must be positive intergers")

    n = random.randint(min_n, max_n)

    min_m = max(min_m, n - 1)
    max_m = min(max_m, (n * (n - 1)) // 2)
    m = random.randint(min_m, max_m)

    print(n, m)
    
    # Generate a tree
    used_edges = set()
    for v in range(2, n + 1):
        u = random.randint(1, v - 1)
        used_edges.add((u, v))
    
    # Generate all possible extra edges
    all_possible_edges = []
    for u in range(1, n + 1):
        for v in range(u + 1, n + 1):
            if ((u, v) in used_edges or (v, u) in used_edges):
                continue
            all_possible_edges.append((u, v))

    # Add extra edges
    required_edges = m - (n - 1)
    edges = random.sample(all_possible_edges, required_edges)
    edges.extend(used_edges)
    random.shuffle(edges)

    # output edges
    nodes = [i for i in range(1, n + 1)]
    random.shuffle(nodes)
    for edge in edges:
        u, v = edge
        u = nodes[u - 1]
        v = nodes[v - 1]
        if (random.randint(0, 1)):
            u, v = v, u
        print(u, v)
```
```
# generate connected graph (1-based, self-loop, multiple edge)
def gen(min_n, max_n, min_m, max_m):
    if (not all(isinstance(x, int) and x > 0 for x in [min_n, max_n, min_m, max_m])):
        raise ValueError("n and m must be positive intergers")

    n = random.randint(min_n, max_n)

    min_m = max(min_m, n - 1)
    m = random.randint(min_m, max_m)
    
    print(n, m)

    # Generate a tree
    edges = []
    for v in range(2, n + 1):
        u = random.randint(1, v - 1)
        edges.append((u, v))
    
    # add extra edges
    for _ in range(n, m + 1):
        edges.append((random.randint(1, n), random.randint(1, n)))

    random.shuffle(edges)

    # output edges
    nodes = [i for i in range(1, n + 1)]
    random.shuffle(nodes)
    for edge in edges:
        u, v = edge
        u = nodes[u - 1]
        v = nodes[v - 1]
        if (random.randint(0, 1)):
            u, v = v, u
        print(u, v)
```

## Example Output
```python
def gen(min_n, max_n, ...):
    ...

if __name__ == "__main__":
    gen(1, 1000000, ...)
```

```python
'''