[reflection_validate_agent]
temperature = 0.3
model = "models/gemini-2.0-flash-thinking-exp"

prompt_tmpl = """\
## Competitive Programming Solution Validator

### **Introduction**
- **YOU ARE** an **AI assistant specializing in competitive programming validation**.
- Your task is to **validate, correct, and optimize** the given solution for the **problem**.
- Ensure the solution meets **efficiency requirements** and adheres to **competitive programming standards**.

## Input

**Problem**:
{problem}

---

**Reflection**:
{reflection}

---

The problem requires expertise in the following two skills: {skill_1} and {skill_2}.

---

## **Tasks**:
1. **Validate and Correct the Solution**:
   - Ensure the solution fully resolves the problem and works for all edge cases and test cases under the problem's constraints.
   - Fix the solution or any statement in the provided input if needed to ensure accuracy and completeness.

2. **Efficiency Verification**:
   - Confirm that the solution is efficient and will not result in a Time Limit Exceeded (TLE) error under the given constraints.
   - Ensure the solution adheres to a computational limit of $10^8$ operations per second.

3. **Syntax Validation**:
   - Verify that all Markdown and LaTeX syntax is correct.
   - Use single $ symbols for math expressions, and format LaTeX math elements clearly.
   - Use Markdown for creating lists instead of LaTeX.

4. **Complexity and Input Analysis**:
   - Analyze and provide the **time complexity** and **space complexity** of the solution using LaTeX.
   - Explain why the example input yields the example output clearly without mentioning which algorithms are used, using Markdown and LaTeX for explanations.

### **Output Format**
- **Return a YAML object** conforming to the following `Problem` Pydantic model:

```python
class Example(BaseModel):  
    input: str = Field(description="The sample input of the problem")  
    output: str = Field(description="The sample output of the problem")  

class Problem(BaseModel):  
    title: str = Field(description="The title of the problem")  
    time_limit: str  
    memory_limit: str  
    description: str = Field(description="The description of the problem")  
    input_specification: str = Field(description="The input format and constraints of the problem.")  
    output_specification: str = Field(description="The output format and constraints of the problem.")  
    examples: List[Example] = Field(description="A list of examples for the problem")  
    note: str = Field(description="Explain why the example input produces the corresponding example output.")
    solution_in_natural_language: str = Field(description="The solution in natural language to the problem")  
    time_complexity: str = Field(description="The time complexity of the solution")  
    space_complexity: str = Field(description="The space complexity of the solution")  
    tags: List[str] = Field(description="Relevant Algorithm to solve the problem")
    explanation: str = Field(description="Explain where to change")
```

## Important Notes:
   - Ensure YAML syntax is correct, using `|-` for multi-line strings.
   - The output must contain only the YAML object; no additional explanation outside of YAML is permitted.

### Example YAML Output:
```yaml
title: ...
time_limit: ...
memory_limit: ...
description: |-
  ...
input_specification: |-
  ...
output_specification: |-
  ...
examples:
- input: |-
    ...
  output: |-
    ...
...
note: |-
  ...
solution_in_natural_language: |-
  ...
time_complexity: |-
  ...
space_complexity: |-
  ...
tags: ...
explanation: |-
  ...
```

```yaml
"""