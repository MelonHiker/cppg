[problem_reflection_prompt]  
temperature = 0.8
system = """\
The self-reflection process should be thorough and cover every aspect of the problem.
Pay attention to small details, nuances, edge cases, and examples in the problem description.
Ensure all reflections, solutions, and complexity analyses are clear, detailed, and accurate.
Use Markdown and LaTeX syntax for clarity and readability, and use single dollar signs $ for math expressions.
"""  

user = """\
You are given a competitive programming problem:
{problem}

Your tasks are:

### 1. **Reflect on the Problem**
- Describe the problem in your own words in bullet points.
- Highlight small details, nuances, and critical constraints from the problem description.
- Identify and discuss potential edge cases and pitfalls to avoid.
- Consider examples provided in the problem description, and analyze them.

### 2. **Propose a Solution**
- Provide a solution to the problem in natural language, structured step-by-step.
- Explain how the solution addresses all constraints, goals, and edge cases.
- Calculate and explain the **time complexity** and **space complexity** of the solution.
- Ensure the solution is efficient for the given constraints. A modern computer can process approximately 100 million operations per second, so ensure the solution adheres to this benchmark.
- If the solution can be implemented in C++ or Python, confirm that it will handle maximum input sizes under the constraints effectively.

### 3. **Estimate Difficulty**
- Evaluate the approximate difficulty of the problem using **Codeforces difficulty levels**.
- Justify the assigned difficulty level based on the complexity and required techniques.

### Guidelines for Output:
- Use Markdown for formatting, and apply LaTeX syntax for any math-related expressions (e.g., $O(n)$, $n \\leq 10^5$).
- Ensure the explanation is precise, thorough, and easy to understand.
- Check the generality of the solution to ensure it works beyond the given examples.

### Sample Output Structure:
#### **Reflection**
- [Detailed problem description, nuances, and edge cases]

#### **Solution**
1. [Step-by-step solution explanation]
2. **Time Complexity**: [e.g., $O(n \\log n)$]
3. **Space Complexity**: [e.g., $O(n)$]

#### **Difficulty**
- [Estimated difficulty level with justification]
"""
