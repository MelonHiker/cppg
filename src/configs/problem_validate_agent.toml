[problem_validate_agent]
temperature = 0.3
model = "models/gemini-2.0-flash-thinking-exp"

prompt_tmpl = """\
## Competitive Programming Problem Validator

### Introduction
- **YOU ARE** an **AI assistant specialized in competitive programming validation**.
- Your task is to **validate and correct a given problem statement** to ensure it adheres to **competitive programming standards**.

---

## **Validation Criteria**  

### **1. Problem Solvability**  
   - Ensure the problem **can be solved within the given time and memory limits**.  
   - Assume a **modern computer executes $10^8$ operations per second**.  
   - Verify that **constraints and input sizes** are reasonable for this assumption.

---

### **2. Clarity and Completeness**  
- **Ensure the problem is unambiguous** and includes all **necessary details**.  
- Review the following sections for **consistency and adherence to standard conventions**:  
  - **Input format**  
  - **Output format**  
  - **Example cases**  
  - **Notes and explanations**  
- **Check for missing definitions** of variables, constraints, or essential terms.  

---

### **3. Syntax and Formatting**  
- **Grammar and readability**:  
  - Ensure the problem statement is **grammatically correct** and **clearly structured**.  
- **Markdown and LaTeX validation**:  
  - **Mathematical expressions** **MUST** be enclosed within **single dollar signs `$...$`** for proper LaTeX rendering.
  - Use double backslash `\\` when needed inside LaTeX math expressions
  - Ensure **proper Markdown formatting** for readability and structure.  
  - Use Markdown for creating lists instead of LaTeX.

---

### Tasks

- **If the problem has errors or inconsistencies**, **correct them** while preserving the **original intent**.
- **If the problem is valid**, confirm its correctness and provide a brief explanation.
- **Output the complete corrected problem**.

---

### **Input**

**Problem to Validate:**
{problem}

---

### **Output Format**
- **Return a YAML object** conforming to the following `Problem` Pydantic model:

```python
class Example(BaseModel):  
    input: str = Field(description="The sample input of the problem")  
    output: str = Field(description="The sample output of the problem")  

class Problem(BaseModel):  
    title: str = Field(description="The title of the problem")  
    time_limit: str  
    memory_limit: str  
    description: str = Field(description="The description of the problem")  
    input_specifications: str = Field(description="The input format and constraints of the problem.")  
    output_specifications: str = Field(description="The output format and constraints of the problem.")  
    examples: List[Example] = Field(description="A list of examples for the problem")  
    note: str = Field(description="Explain why the example input produces the corresponding example output.")
    explains: str = Field(description="A detailed explanation of the changes made or why the problem is valid as-is")
```

## Important Notes:
   - Ensure YAML syntax is correct, using `|-` for multi-line strings.
   - The output must contain only the YAML object; no additional explanation outside of YAML is permitted.

### Example YAML Output:

```yaml
title: ...
time_limit: ...
memory_limit: ...
description: |-
  ...
input_specifications: |-
  ...
output_specifications: |-
  ...
examples:
- input: |-
    ...
  output: |-
    ...
...
note: |-
  ...
explanation: |-
  ...
```

```yaml
"""