generate_problem.py :: INFO
MelonHiker's Magnificent Machines
time limit per test: 2 seconds
memory limit per test: 512 megabytes

# PROBLEM STATEMENT
MelonHiker has built $N$ magnificent machines, each capable of producing HikMelon tokens. Each machine has a specific production rate $r_i$ (HikMelon tokens per second) and a startup cost $c_i$ (HikMelon tokens).  MelonHiker has a total budget of $B$ HikMelon tokens.

MelonHiker can start a subset of the machines, as long as the sum of their startup costs doesn't exceed the budget. Once started, the machines run indefinitely, producing tokens at their respective rates. MelonHiker wants to maximize the total production rate of the running machines. Unfortunately, there's a catch: due to a quirky design flaw, at most $K$ machines can be running simultaneously.

Help MelonHiker determine the maximum total production rate achievable given the budget constraint and the limit on the number of running machines.


# INPUT
The first line contains three integers $N$, $K$, and $B$ ($1 \le N \le 10^5$, $1 \le K \le N$, $1 \le B \le 10^{12}$) - the number of machines, the maximum number of running machines, and the total budget, respectively.

Each of the next $N$ lines contains two integers $r_i$ and $c_i$ ($1 \le r_i \le 10^6$, $1 \le c_i \le 10^6$) - the production rate and startup cost of the $i$-th machine, respectively.

# OUTPUT
Print a single integer, the maximum total production rate achievable.

# EXAMPLES
```
Input
4 2 10
5 3
7 5
2 1
3 4
Output
12

Input
5 3 7
1 1
2 2
3 3
4 4
5 5
Output
6

Input
3 1 2
100 1
1 2
2 1
Output
100
```

# NOTES
In the first example, MelonHiker can start machines 1 and 2 with a total cost of $3 + 5 = 8 \le 10$, and achieve a total production rate of $5 + 7 = 12$.

In the second example, MelonHiker can start machines 1, 2 and 3 with a total cost of $1 + 2 + 3 = 6 \le 7$, and achieve a total production rate of $1 + 2 + 3 = 6$.