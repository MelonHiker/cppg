{
    "title": "Cataclysmic Calculations",
    "time_limit": "2 seconds",
    "memory_limit": "256 megabytes",
    "description": "In an alternate universe, where cats possess a unique form of numerical energy, a peculiar ritual involves manipulating sequences of numbers derived from cat energy. Given a sequence of positive integers, representing the energy levels of individual cats, you must perform a series of calculations. The ritual requires you to compute a specific value for each possible subsegment of the sequence. This value is derived from the greatest common divisor (GCD) of the numbers within the subsegment, with a twist: a power of a prime number must be deducted from each GCD before it is added to a final result.\n\nSpecifically, for each subsegment $[l, r]$ of the given sequence $a$, calculate the GCD, $g$, of the numbers $a_l, a_{l+1}, ..., a_r$. Then, identify the highest power of 2, i.e., $2^k$, that divides $g$. Compute the result as $g - 2^k$. If $g$ is 0, treat $2^k$ as 0. Sum these values for all possible subsegments of $a$, outputting the final sum modulo $10^9 + 7$.",
    "input_constraints": "The first line contains an integer $n$ ($1 \\le n \\le 10^5$), representing the number of integers in the sequence.\nThe second line contains $n$ space-separated integers $a_1, a_2, \\dots, a_n$ ($1 \\le a_i \\le 10^9$), representing the cat energy levels.",
    "output_constraints": "Print a single integer representing the final sum modulo $10^9 + 7$.",
    "examples": [
        {
            "input": "3\n2 4 6",
            "output": "4"
        },
        {
            "input": "4\n1 2 3 4",
            "output": "2"
        },
        {
            "input": "5\n10 15 20 25 30",
            "output": "132"
        }
    ],
    "note": "In the first example:\n- Subsegment [1, 1]: gcd(2) = 2. Highest power of 2 is $2^1 = 2$. Result: $2 - 2 = 0$.\n- Subsegment [1, 2]: gcd(2, 4) = 2. Highest power of 2 is $2^1 = 2$. Result: $2 - 2 = 0$.\n- Subsegment [1, 3]: gcd(2, 4, 6) = 2. Highest power of 2 is $2^1 = 2$. Result: $2 - 2 = 0$.\n- Subsegment [2, 2]: gcd(4) = 4. Highest power of 2 is $2^2 = 4$. Result: $4 - 4 = 0$.\n- Subsegment [2, 3]: gcd(4, 6) = 2. Highest power of 2 is $2^1 = 2$. Result: $2 - 2 = 0$.\n- Subsegment [3, 3]: gcd(6) = 6. Highest power of 2 is $2^1 = 2$. Result: $6 - 2 = 4$.\nThe total sum is $0 + 0 + 0 + 0 + 0 + 4 = 4$.\n\nIn the second example:\n- Subsegment [1, 1]: gcd(1) = 1. Highest power of 2 is $2^0=1$. Result: 1 - 1 = 0.\n- Subsegment [2, 2]: gcd(2) = 2. Highest power of 2 is $2^1=2$. Result: 2 - 2 = 0.\n- Subsegment [3, 3]: gcd(3) = 3. Highest power of 2 is $2^0=1$. Result: 3 - 1 = 2.\n- Subsegment [4, 4]: gcd(4) = 4. Highest power of 2 is $2^2=4$. Result: 4 - 4 = 0.\n- Subsegment [1, 2]: gcd(1, 2) = 1. Highest power of 2 is $2^0=1$. Result: 1 - 1 = 0.\n- Subsegment [1, 3]: gcd(1, 2, 3) = 1. Highest power of 2 is $2^0=1$. Result: 1 - 1 = 0.\n- Subsegment [1, 4]: gcd(1, 2, 3, 4) = 1. Highest power of 2 is $2^0=1$. Result: 1 - 1 = 0.\n- Subsegment [2, 3]: gcd(2, 3) = 1. Highest power of 2 is $2^0=1$. Result: 1 - 1 = 0.\n- Subsegment [2, 4]: gcd(2, 3, 4) = 1. Highest power of 2 is $2^0=1$. Result: 1 - 1 = 0.\n- Subsegment [3, 4]: gcd(3, 4) = 1. Highest power of 2 is $2^0=1$. Result: 1 - 1 = 0.\nThe total sum is 0 + 0 + 2 + 0 + 0 + 0 + 0 + 0 + 0 + 0 = 2.",
    "solution_in_natural_language": "1.  **Initialization:**\n    *   Initialize a variable `total_sum` to 0. This will store the final result. We need to take the modulo of this variable each time we add a value.\n    *   Read the input integer `n`, which is the number of integers in the sequence.\n    *   Read the sequence of `n` integers into an array `a`.\n\n2.  **Iterate through Subsegments:**\n    *   Use nested loops to iterate through all possible subsegments. The outer loop iterates from `l = 0` to `n - 1` (start index of subsegment).\n    *   The inner loop iterates from `r = l` to `n - 1` (end index of subsegment).\n\n3.  **Calculate GCD:**\n    *   Inside the inner loop, for the current subsegment `[l, r]`, calculate the GCD (`g`) of the elements `a[l], a[l+1], ..., a[r]`. Use the Euclidean algorithm to find GCD iteratively. The GCD can be implemented to take two integers. We could use a helper function for this.\n\n4.  **Find Highest Power of 2:**\n    *   After calculating the GCD `g`, find the highest power of 2 that divides `g`. Here, we handle the case if `g` is 0. We can achieve this by right-shifting `g` by 1 while the result is even, keeping count of shift times which is k, then result is `2^k`. Or, use a loop and keep dividing `g` by 2 until `g` is odd. The number of divisions will be k. `2^k` is the required power.\n    *   If `g` is 0, then highest power of 2 is 0.\n\n5.  **Calculate Modified GCD Value and Update Total Sum:**\n    *   Calculate the modified GCD value as `g - 2^k`.\n    *   Add the modified GCD value to the `total_sum`. Take modulo of `total_sum` with `10^9 + 7`.\n\n6. **Modulo:** Take the modulo with `10^9 + 7` after all calculations.\n\n7.  **Output:**\n    *   After processing all subsegments, output the final `total_sum`.",
    "time_complexity": "The time complexity is close to  O(n^2 * log(max(a_i))). However, because the maximum value of a[i] is limited to 10^9, and log(10^9) is smaller than 32, the overall complexity is very close to O(n^2) which is acceptable according to the given time limit.",
    "space_complexity": "The space complexity is O(n).",
    "difficulty": "2000"
}