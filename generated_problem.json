{
    "title": "MelonWalker's Enigma",
    "time_limit": "2 seconds",
    "memory_limit": "256 megabytes",
    "description": "MelonWalker, in his infinite mischief, has devoured a cat and now faces a peculiar challenge. He has been presented with a series of riddles, each involving a unique number system. To escape his grim fate, MelonWalker must solve them all! He receives several sets of equations of the form $x \\equiv a_i \\pmod{m_i}$. The solution $x$ must be a positive integer and smaller than a large prime $P = 10^9 + 7$. The numbers $m_i$ are pairwise coprime and less than $1000$. Help MelonWalker by finding the smallest positive solution for $x$ for each given set of congruences modulo $P$!",
    "input_constraints": "The first line contains an integer $t$ ($1 \\leq t \\leq 50$), the number of test cases.\nFor each test case, the first line contains an integer $k$ ($1 \\leq k \\leq 10$), the number of congruences in the set.\nThe next $k$ lines each contain two integers $a_i$ and $m_i$ ($0 \\leq a_i < m_i < 1000$), representing the $i$-th congruence $x \\equiv a_i \\pmod{m_i}$. It is guaranteed that the $m_i$ are pairwise coprime.",
    "output_constraints": "For each test case, output the smallest positive integer $x$ that satisfies all congruences modulo $10^9+7$.",
    "examples": [
        {
            "input": "2\n2\n2 3\n3 5\n3\n1 2\n2 3\n3 5",
            "output": "8\n23"
        },
        {
            "input": "1\n4\n1 2\n2 3\n3 5\n4 7",
            "output": "53"
        }
    ],
    "note": "In the first test case, we have two congruences: $x \\equiv 2 \\pmod{3}$ and $x \\equiv 3 \\pmod{5}$. The smallest positive solution is $x=8$.\nIn the second test case, we have $x \\equiv 1 \\pmod{2}$, $x \\equiv 2 \\pmod{3}$, and $x \\equiv 3 \\pmod{5}$. The smallest positive solution is $x = 23$.\nIn the third test case, we have $x \\equiv 1 \\pmod{2}$, $x \\equiv 2 \\pmod{3}$, $x \\equiv 3 \\pmod{5}$, and $x \\equiv 4 \\pmod{7}$. The smallest positive solution is $x=53$.",
    "solution_in_natural_language": "The problem is solved using the Chinese Remainder Theorem (CRT). We iteratively combine congruences. For each new congruence x â‰¡ a_i (mod m_i), we update the current solution x and the combined modulus M. Initially, x is a_1, and M is m_1. In each iteration, we find a value of k such that x + k*M = a_i (mod m_i). This leads to k*M = (a_i - x) mod m_i. To solve for k, we find the modular inverse of M with respect to m_i, denoted as inv(M, m_i),  resulting in k = (a_i - x) * inv(M, m_i) mod m_i.  We update x as x_new = x + k*M and M as M*m_i and x = x_new mod (10^9+7). The process repeats until all congruences are processed. The final x will be the solution.",
    "time_complexity": "O(t*k), where t is the number of test cases and k is the number of congruences in each test case. The modular inverse calculations are dominated by the loop over the k congruences.",
    "space_complexity": "O(k), primarily to store the congruences. The other variables require constant space."
}